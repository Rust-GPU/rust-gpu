searchState.loadedDescShard("spirv_tools", 0, "Indicates data rules validation failure.\nOpenCL Embedded Profile 1.2 plus cl_khr_il_program, latest …\nOpenCL Embedded Profile 2.0 plus cl_khr_il_program, latest …\nOpenCL Embedded Profile 2.1 latest revision.\nOpenCL Embedded Profile 2.2 latest revision.\nOpenCL Full Profile 1.2 plus cl_khr_il_program, latest …\nOpenCL Full Profile 2.0 plus cl_khr_il_program, latest …\nOpenCL Full Profile 2.1 latest revision.\nOpenCL Full Profile 2.2 latest revision.\nOpenGL 4.0 plus GL_ARB_gl_spirv, latest revisions.\nOpenGL 4.1 plus GL_ARB_gl_spirv, latest revisions.\nOpenGL 4.2 plus GL_ARB_gl_spirv, latest revisions.\nOpenGL 4.3 plus GL_ARB_gl_spirv, latest revisions.\nOpenGL 4.5 plus GL_ARB_gl_spirv, latest revisions.\nSuccess, but signals early termination.\nCertain target environments impose additional restrictions …\nSPIR-V 1.0 latest revision, no other restrictions.\nSPIR-V 1.1 latest revision, no other restrictions.\nSPIR-V 1.2, latest revision, no other restrictions.\nSPIR-V 1.3 latest revision, no other restrictions.\nSPIR-V 1.4 latest revision, no other restrictions.\nSPIR-V 1.5 latest revision, no other restrictions.\nVulkan 1.0 latest revision.\nVulkan 1.1 latest revision.\nVulkan 1.1 with VK_KHR_spirv_1_4, i.e. SPIR-V 1.4 binary.\nVulkan 1.2 latest revision.\nWork in progress WebGPU 1.0.\nIndicates wrong SPIR-V version\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdd color codes to output\nAdd some comments to the generated assembly\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndent assembly\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDo not output the module header as leading comments in the …\nNumeric IDs in the binary will have the same values as in …\nPrint to stdout.\nUse friendly names where possible.  The heuristic may …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets a byte array for binary\nGets the words for the binary\nReturns the argument unchanged.\nTransmutes a SPIRV binary, which are stored as 32 bit …\nCalls <code>U::from(self)</code>.\nTransmutes a regular byte array into a SPIRV binary of 32 …\nDebug information.\nNormal error due to user input.\nUnrecoverable error due to environment. Will exit the …\nGeneral information.\nUnrecoverable error due to SPIRV-Tools internals. Will …\nIndicates data rules validation failure.\nSuccess, but signals early termination.\nWarning information.\nIndicates wrong SPIR-V version\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSome messages can include additional information, …\nCreate aggressive dead code elimination pass This pass …\nReplaces the extensions …\nCreates a block merge pass. This pass searches for blocks …\nCreates a CFG cleanup pass. This pass removes cruft from …\nCreate a pass to do code sinking.  Code sinking is a …\nCreate a pass to combine chained access chains. This pass …\nCreates a compact ids pass. The pass remaps result ids to …\nCreates a conditional constant propagation (CCP) pass. …\nCreate pass to convert relaxed precision instructions to …\nCreate copy propagate arrays pass. This pass looks to copy …\nCreate dead branch elimination pass. For each entry point …\nCreates a dead insert elimination pass. This pass …\nCreate dead variable elimination pass. This pass will …\nCreate descriptor scalar replacement pass. This pass …\nCreates a eliminate-dead-constant pass. A …\nCreates an eliminate-dead-functions pass. An …\nCreates an eliminate-dead-members pass. An …\nCreate a pass to fix incorrect storage classes.  In order …\nCreates a flatten-decoration pass. A flatten-decoration …\nCreates a fold-spec-constant-op-and-composite pass. A …\nCreates a freeze-spec-constant-value pass. A …\nCreates a graphics robust access pass.\nCreates a pass that converts if-then-else like assignments …\nCreates an exhaustive inline pass. An exhaustive inline …\nCreates an opaque inline pass. An opaque inline pass …\nCreates an insert/extract elimination pass. This pass …\nReplaces the internal version of GLSLstd450 InterpolateAt* …\nCreates a local access chain conversion pass. A local …\nCreates an SSA local variable load/store elimination pass. …\nCreate value numbering pass. This pass will look for …\nCreates a single-block local variable load/store …\nCreates a local single store elimination pass. For each …\nCreate LICM pass. This pass will look for invariant …\nCreates a loop peeling pass. This pass will look for …\nCreates a loop unswitch pass. This pass will look for loop …\ncreate merge return pass. changes functions that have …\nCreates a null pass. A null pass does nothing to the …\nOptions for specifying the behavior of the optimizer\nCreate a private to local pass. This pass looks for …\nCreate line propagation pass This pass propagates line …\nCreate a pass to reduce the size of loads. This pass looks …\nCreate global value numbering pass. This pass will look …\nCreate dead line elimination pass This pass eliminates …\nCreate relax float ops pass. This pass decorates all …\nCreates a remove duplicate pass. This pass removes various …\nCreates a remove-unused-interface-variables pass. Removes …\nCreates a pass that will replace instructions that are not …\nCreate the SSA rewrite pass. This pass converts load/store …\nCreates a pass that simplifies instructions using the …\nCreates a strength-reduction pass. A strength-reduction …\nCreates a strip-debug-info pass. A strip-debug-info pass …\nCreates a strip-nonsemantic-info pass. A …\nCreates a unify-constant pass. A unify-constant pass …\nCreate a pass to upgrade to the VulkanKHR memory model. …\nCreate a vector dce pass. This pass looks for components …\nCreates a workaround driver bugs pass.  This pass attempts …\nCreate a pass to replace each OpKill instruction with a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRecords the maximum possible value for the id bound.\nRecords whether all bindings within the module should be …\nRecords whether all specialization constants within the …\nRegisters passes that attempt to legalize the generated …\nRegister a single pass with the the optimizer.\nRegisters passes that attempt to improve performance of …\nRegisters passes that attempt to improve the size of …\nRecords the validator options that should be passed to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegisters passes that attempt to legalize the generated …\nRegister a single pass with the the optimizer.\nRegisters passes that attempt to improve performance of …\nRegisters passes that attempt to improve the size of …\nRecords whether or not the validator should relax the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApplies a maximum to one or more Universal limits\nRecords whether the validator should use “relaxed” …\nRecords whether or not the validator should relax the …\nRecord whether or not the validator should relax the rules …\nRecords whether the validator should use “scalar” …\nRecords whether or not the validator should skip …\nRecords whether the validator should use standard block …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")