searchState.loadedDescShard("spirv_builder", 0, "<code>spirv-builder</code>\nSPIR-V operand kind: Capability\nLike <code>SilentExit</code>, but also using <code>debugPrintf</code> to report the …\nPrint only dependency information (eg for multiple …\nPrint all cargo metadata.\nInclude all <code>OpName</code>s for everything, and <code>OpLine</code>s. …\nOnly include <code>OpName</code>s for public interface variables …\nPrint no cargo metadata.\nStrip all names and other debug information from SPIR-V …\nOptions for specifying the behavior of the optimizer …\nCargo features specification for building the shader crate.\nStrategy used to handle Rust <code>panic!</code>s in shaders compiled …\nReturn from shader entry-point with no side-effects …\ndirectory with all the <code>target-specs</code> jsons for our codegen …\n<strong>Warning</strong>: this is <em><strong>unsound</strong></em> (i.e. adds Undefined Behavior to …\nOptions for specifying the behavior of the validator …\nBuilds the module. If <code>print_metadata</code> is …\nAdds a capability to the SPIR-V module. Checking if a …\nAdds a capability to the SPIR-V module. Checking if a …\nSet –default-features for the target shader crate.\nDeny any warnings, as they may never be printed when …\nAdds an extension to the SPIR-V module. Checking if an …\nAdds an extension to the SPIR-V module. Checking if an …\nSet additional “codegen arg”. Note: the …\nSet additional “codegen arg”. Note: the …\nSet –features for the target shader crate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplits the resulting SPIR-V file into one module per entry …\nSplits the resulting SPIR-V file into one module per entry …\nspirv-opt flags\nThe path of the “target specification” file.\nPreserve unused descriptor bindings. Useful for reflection.\nRecords whether all bindings within the module should be …\nWhether to print build.rs cargo metadata (e.g. …\nWhether to print build.rs cargo metadata (e.g. …\nEnable <code>VK_KHR_relaxed_block_layout</code> when checking standard …\nRecords whether the validator should use “relaxed” …\nAllow allocating an object of a pointer type and returning …\nRecords whether or not the validator should relax the …\nAllow store from one struct type to a different type with …\nRecord whether or not the validator should relax the rules …\nBuild in release. Defaults to true.\nBuild in release. Defaults to true.\nEnable <code>VK_EXT_scalar_block_layout</code> when checking standard …\nRecords whether the validator should use “scalar” …\nSet –default-features for the target shader crate.\nSet –features for the target shader crate.\nCargo features specification for building the shader crate.\nChange the shader <code>panic!</code> handling strategy (see …\nChange the shader <code>panic!</code> handling strategy (see …\nSkip checking standard uniform/storage buffer layout. …\nRecords whether or not the validator should skip …\nSets the level of metadata (primarily <code>OpName</code> and <code>OpLine</code>) …\nSets the level of metadata (primarily <code>OpName</code> and <code>OpLine</code>) …\nThe target triple, eg. <code>spirv-unknown-vulkan1.2</code>\nSet the target dir path to use for building shaders. …\nSet the target dir path to use for building shaders. …\nSets the path of the “target specification” file.\nEnable <code>VK_KHR_uniform_buffer_standard_layout</code> when checking …\nRecords whether the validator should use standard block …\nspirv-val flags\nWhether to also print a “backtrace” (i.e. the chain of …\nWhether to also print the entry-point inputs (excluding …\nFilters the various env vars that a <code>cargo</code> child process …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")