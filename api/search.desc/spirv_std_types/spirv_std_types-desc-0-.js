searchState.loadedDescShard("spirv_std_types", 0, "<code>spirv-std-types</code>\nThe access permissions for the image.\nWhether the image uses arrayed content.\n1D Buffer texture\n2D Cubemap texture\nThe dimension of the image.\nThe image uses not arrayed content.\nIndicates that the image does not contain depth …\nThe image contains single-sampled content.\nWhether a given image contains depth information. <strong>Note</strong> …\nThe underlying internal representation of the image.\nWhether the image uses arrayed content.\nThe image will not be used with a sampler.\n1D\n32 bits containing two 11 bit floating point numbers for …\nSingle red channel, 16 bit unsigned normalized integer.\nSingle red channel, 16 bit signed normalized integer.\nSingle red channel, 16 bit floating point.\nSingle red channel, 16 bit signed integer (not normalized).\nSingle red channel, 16 bit unsigned integer (not …\nSingle red channel, 32 bit floating point.\nSingle red channel, 32 bit signed integer (not normalized).\nSingle red channel, 32 bit unsigned integer (not …\nSingle red channel, 64 bit signed integer (not normalized).\nSingle red channel, 64 bit unsigned integer (not …\nSingle red channel, 8 bit unsigned normalized integer.\nSingle red channel, 8 bit signed normalized integer.\nSingle red channel, 8 bit signed integer (not normalized).\nSingle red channel, 8 bit unsigned integer (not …\nA read only image.\nA readable and writable image.\n2D Rectangle texture\nRed+Green channels, 16 bit unsigned normalized integer per …\nRed+Green channels, 16 bit signed normalized integer per …\nRed+Green channels, 16 bit floating point per channel.\nRed+Green channels, 16 bit signed integer per channel (not …\nRed+Green channels, 16 bit unsigned integer per channel …\nRed+Green channels, 32 bit floating point per channel.\nRed+Green channels, 32 bit signed integer per channel (not …\nRed+Green channels, 32 bit unsigned integer per channel …\nRed+Green channels, 8 bit unsigned normalized integer per …\nRed+Green channels, 8 bit signed normalized integer per …\nRed+Green channels, 8 bit signed integer per channel (not …\nRed+Green channels, 8 bit unsigned integer per channel …\n32 bits containing three 10 bit unsigned normalized …\n32 bits containing three 10 bit unsigned integers for the …\nRGBA channels, 16 bit unsigned normalized integer per …\nRGBA channels, 16 bit signed normalized integer per …\nRGBA channels, 16 bit floating point per channel.\nRGBA channels, 16 bit signed integer per channel (not …\nRGBA channels, 16 bit unsigned integer per channel (not …\nRGBA channels, 32 bit floating point per channel.\nRGBA channels, 32 bit signed integer per channel (not …\nRGBA channels, 32 bit unsigned integer per channel (not …\nRGBA channels, 8 bit unsigned normalized integer per …\nRGBA channels, 8 bit signed normalized integer per channel.\nRGBA channels, 8 bit signed integer per channel (not …\nRGBA channels, 8 bit unsigned integer per channel (not …\nWhether or not the image will be accessed in combination …\nVulkan subpass buffer\n3D\nThe image uses arrayed content.\nIndicates that the image contains depth information.\nThe image contains multisampled content.\n2D\nIndicates that is not known ahead of time whether the …\nIndicates that it is not known ahead of time whether the …\nRepresentation not known at compile time.\nA write only image.\nThe image will be used with a sampler.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")