searchState.loadedDescShard("wasmparser", 0, "A simple event-driven library for parsing WebAssembly …\nThis symbol represents an absolute address.\nA non-nullable reference to any object aka <code>(ref any)</code>.\nA nullable reference to any object aka <code>(ref null any)</code> aka …\nA non-nullable reference to an array aka <code>(ref array)</code>.\nA nullable reference to an array aka <code>(ref null array)</code> aka …\nAn abstract heap type; e.g., <code>anyref</code>.\nAn abstract heap type.\nFor a load, it acquires; this orders all operations before …\nThe data segment is active.\nThe element segment is active.\nRelocation entry includes a 32-bit addend.\nRelocation entry includes a 64-bit addend.\nEquivalent of <code>catch_all</code>\nEquivalent of <code>catch_all_ref</code>\nThe abstract <code>any</code> heap type.\nThe type is for an array.\nThe abstract <code>array</code> heap type.\nRepresents a type of an array in a WebAssembly module.\nThis is a local symbol (this is exclusive with […\nThis is a weak symbol.\nA binary reader of the WebAssembly structures and types.\nA binary reader for WebAssembly modules.\nA Wasm <code>block</code> control block.\nRepresents a block type.\nA br_table entries representation.\nA hint for a single branch.\nBranch hints for a single function.\nA reader for the <code>metadata.code.branch_hint</code> custom section.\nA non-nullable reference to a cont object aka <code>(ref cont)</code>.\nAlias for the wasm <code>contref</code> type.\nA nullable reference to a cont object aka <code>(ref null cont)</code> …\nCatch clauses that can be specified in <code>TryTable</code>.\nA successful return payload from <code>Parser::parse</code>.\nAn entry of the code section, a function, was parsed from …\nA reader for the code section of a WebAssembly module.\nIndicator of the start of the code section of a …\nRepresents COMDAT data in the linking custom section.\nThe COMDAT groups of associated linking objects.\nRepresents a reader for COMDAT data from the linking …\nRepresents a symbol that is part of a comdat.\nRepresents a symbol kind.\nThe encoding format is a WebAssembly component.\nA <code>CompositeType</code> can contain one of these types.\nRepresents a composite type in a WebAssembly module.\nA concrete, user-defined type.\nRepresents an initialization expression.\nThe type is for a continuation.\nThe abstract <code>continuation</code> heap type.\nRepresents a type of a continuation in a WebAssembly …\nA single instance from a coredump instances section\nA custom section representing the instances involved in a …\nThe data portion of a “coremodules” custom section. …\nThe data portion of a custom section representing a core …\nA single stack frame from a core dump\nThe data portion of a custom section representing a core …\nLocal and stack values are encoded using one byte for the …\nA module or component custom section was received.\nA reader for custom sections of a WebAssembly module.\nRepresents a data segment in a core WebAssembly module.\nThe symbol is a data segment.\nThe symbol is a data symbol.\nThe name is for the data segments.\nA module data count section was received.\nThe kind of data segment.\nA module data section was received and the provided reader …\nA reader for the data section of a WebAssembly module.\nThe element segment is declared.\nRepresents the metadata about a data symbol defined in the …\nParser for the dynamic linking <code>dylink.0</code> custom section.\nPossible subsections of the <code>dylink.0</code> custom section.\nA non-nullable reference to an eq object aka <code>(ref eq)</code>.\nA nullable reference to an eq object aka <code>(ref null eq)</code> aka …\nA non-nullable reference to an exn object aka <code>(ref exn)</code>.\nAlias for the wasm <code>exnref</code> type.\nA nullable reference to an exception object aka …\nThis symbol uses an explicit symbol name, rather than …\nThis symbol is intended to be exported from the wasm …\nA non-nullable reference to an extern object aka …\nAlias for an unshared <code>extern</code> heap type.\nAlias for the wasm <code>externref</code> type.\nA nullable reference to an extern object aka …\nRepresents a core WebAssembly element segment.\nThe name is for the element segments.\nRepresents the items of an element segment.\nThe kind of element segment.\nA module element section was received and the provided …\nA reader for the element section of a WebAssembly module.\nA Wasm <code>else</code> control block.\nThe block produces consumes nor produces any values.\nThe supported encoding formats for the parser.\nThe end of the WebAssembly module or component was reached.\nThe abstract <code>eq</code> heap type.\nContains the error value\nThe symbol is an event.\nThe symbol is an event.\nAn event index encoded as a 5-byte varuint32. Used for the …\nThe tag is an exception type.\nThe abstraction <code>exception</code> heap type.\nRepresents an export in a WebAssembly module.\nA module export section was received, and the provided …\nA reader for the export section of a WebAssembly module.\nEach element in the table is initialized with the …\nThis element contains constant expressions used to …\nThe abstract, external heap type.\nExternal types as defined here.\nAn f32 value\nThe value type is f32.\nAn f64 value\nThe value type is f64.\nA non-nullable untyped function reference aka <code>(ref func)</code>.\nAlias for an unshared <code>func</code> heap type.\nAlias for the wasm <code>funcref</code> type.\nA nullable untyped function reference aka <code>(ref null func)</code> …\nThe name is for fields.\nRepresents a field type of an array or a struct.\nThe kind of a control flow <code>Frame</code>.\nA trait implemented for items that can be decoded directly …\nThe external kind is a function.\nThe type is a function.\nThe symbol is a function.\nThe symbol is a function.\nThe type is for a function.\nThe abstract, untyped (any) function.\nRepresents a type of a function in a WebAssembly module.\nThe block is described by a function type.\nThe name is for the functions.\nRepresents a WebAssembly function body.\nA function index encoded as a uint32. Used in custom …\nA function index encoded as a 5-byte varuint32. Used for …\nA byte offset within code section for the specific …\nThe 64-bit counterpart of <code>FunctionOffsetI32</code>. A byte offset …\nA module function section was received and the provided …\nA reader for the function section of a WebAssembly module.\nThis element contains function indices.\nRepresents a core WebAssembly global.\nThe external kind is a global.\nThe type is a global.\nThe symbol is a global.\nThe symbol is a global.\nThe name is for the globals.\nA global index encoded as uint32. (since LLVM 11.0)\nA global index encoded as a 5-byte varuint32, e.g. the …\nA module global section was received and the provided …\nA reader for the global section of a WebAssembly module.\nRepresents a global’s type.\nHandle clauses that can be specified in <code>ResumeTable</code>.\nA heap type.\nThe storage type is i16.\nThe abstract <code>i31</code> heap type.\nA non-nullable reference to an i31 object aka <code>(ref i31)</code>.\nA nullable reference to an i31 object aka <code>(ref null i31)</code> …\nAn i32 value\nThe value type is i32.\nAn i64 value\nThe value type is i64.\nThe storage type is i8.\nAn IEEE binary32 immediate floating point value, …\nAn IEEE binary64 immediate floating point value, …\nA Wasm <code>if</code> control block.\nRepresents an import in a WebAssembly module.\nA module import section was received and the provided …\nA reader for the import section of a WebAssembly module.\nRepresents a reader for indirect names from the names …\nRepresents an indirect name in the names custom section.\nRepresents an init function in the linking custom section.\nRepresents a reader for init functions from the linking …\nA list of constructor functions to be called at startup.\nReturn value of <code>CustomSectionReader::as_known</code>.\nThe name is for the function labels.\nA Wasm legacy <code>catch</code> control block.\nA Wasm legacy <code>catch_all</code> control block.\nA Wasm legacy <code>try</code> control block.\nRepresents a subsection read from the linking custom …\nA reader for the <code>linking</code> custom section of a WebAssembly …\nThe name is for the function locals.\nAn iterator over locals in a function body.\nA reader for a function body’s locals.\nA Wasm <code>loop</code> control block.\nRepresents a memory immediate in a WebAssembly memory …\nRepresents a <code>WASM_DYLINK_MEM_INFO</code> field\nThe external kind is a memory.\nThe type is a memory.\nThe name is for the memories.\nA linear memory index encoded as a uint32, e.g. taking the …\nThe 64-bit counterpart of <code>MemoryAddrI32</code>. A 64-bit linear …\nA linear memory index encoded as a 5-byte varuint32. Used …\nThe 64-bit counterpart of <code>MemoryAddrLeb</code>. A 64-bit linear …\nA byte offset between the relocating address and a linear …\nA memory address relative to the __memory_base wasm …\nThe 64-bit counterpart of <code>MemoryAddrRelSleb</code>.\nA linear memory index encoded as a 5-byte varint32. Used …\nThe 64-bit counterpart of <code>MemoryAddrSleb</code>. A 64-bit linear …\nAn offset from the __tls_base symbol encoded as a 5-byte …\nThe 64-bit counterpart of <code>MemoryAddrTlsSleb</code>. (in LLVM 13.0)\nA module memory section was received and the provided …\nA reader for the memory section of a WebAssembly module.\nRepresents a memory’s type.\nA missing value (usually missing because it was optimized …\nThe encoding format is a WebAssembly module.\nThe name is for the module.\nAn index into a Wasm module’s types space.\nTo compute the arity (param and result counts) of “…\nA non-nullable reference to a nocont object aka …\nA non-nullable reference to a noexn object aka <code>(ref noexn)</code>.\nA non-nullable reference to a noextern object aka …\nA non-nullable reference to a nofunc object aka …\nA non-nullable reference to no object aka <code>(ref none)</code>.\nThis symbol is intended to be included in the linker …\nA nullable reference to a nocont object aka …\nA nullable reference to a noexn object aka <code>(ref null noexn)</code>…\nA nullable reference to a noextern object aka …\nA nullable reference to a nofunc object aka …\nA nullable reference to no object aka <code>(ref null none)</code> aka …\nRepresents a name read from the names custom section.\nRepresents a name map from the names custom section.\nA reader for the name custom section of a WebAssembly …\nRepresents a name for an index from the names section.\nThis can be returned at any time and indicates that more …\nThe abstract <code>noexn</code> heap type.\nThe abstract <code>noexn</code> heap type.\nThe abstract <code>noextern</code> heap type.\nThe abstract <code>nofunc</code> heap type.\nRelocation entry does not include an addend.\nThe abstract <code>none</code> heap type.\nContains the success value\nEquivalent of <code>(on $tag $lbl)</code>.\nEquivalent of <code>(on $tag switch)</code>.\nEquivalent of <code>catch</code>\nEquivalent of <code>catch_ref</code>\nInstructions as defined here.\nAn iterator over a function’s operators.\nAn iterator over a function’s operators with offsets.\nA reader for a core WebAssembly function’s operators.\nRepresents the memory ordering for atomic instructions.\nThe result type of the visitor.\nA packed representation of a type index.\nA chunk was successfully parsed.\nAn incremental parser of a binary WebAssembly module or …\nThe data segment is passive.\nThe element segment is passive.\nValues that can be parsed from a WebAssembly module or …\nA field from the producers custom section.\nRepresents a field value in the producers custom section.\nA reader for the producers custom section of a WebAssembly …\nRepresents a recursive type group in a WebAssembly module.\nAn index into the containing recursion group’s elements.\nThe value type is a reference.\nThe table is initialized to all null elements.\nA reference type.\nIndicates the kind of addend that applies to a relocation …\nReader for reloc.* sections as defined by …\nSingle relocation entry within a <code>reloc.*</code> section, as …\nReader for relocation entries within a <code>reloc.*</code> section.\nRelocation entry type. Each entry type corresponds to one …\nThe result for <code>BinaryReader</code> operations.\nA representation of dispatch tables on <code>resume</code> and …\nThe segment contains only null-terminated strings, which …\nA non-nullable reference to a struct aka <code>(ref struct)</code>.\nA nullable reference to a struct aka <code>(ref null struct)</code> aka …\nThe symbol is a section.\nThe symbol is a section.\nA generic structure for reading a section of a WebAssembly …\nA consuming iterator of a <code>SectionLimited</code>.\nAn iterator over a limited section iterator.\nA byte offset from start of the specified section encoded …\nRepresents extra metadata about the data segments.\nFlags for WebAssembly segments.\nExtra metadata about the data segments.\nRepresents a reader for segments from the linking custom …\nLike <code>AcqRel</code> but all threads see all sequentially …\nA module start section was received.\nRepresents storage types introduced in the GC spec for …\nThe type is for a struct.\nThe abstract <code>struct</code> heap type.\nRepresents a type of a struct in a WebAssembly module.\nRepresents a subtype of possible other types in a …\nA trait implemented for subsections of another outer …\nIterator/reader over the contents of a section which is …\nFlags for WebAssembly symbols.\nRepresents extra information about symbols in the linking …\nRepresents a reader for symbol info from the linking …\nExtra information about the symbols present in the module.\nThis symbol resides in thread local storage.\nThe segment contains thread-local data.\nType information about a table defined in the table …\nThe external kind if a table.\nThe type is a table.\nThe symbol is a table.\nThe symbol is a table.\nThe name is for the tables.\nA function table index encoded as a uint32, e.g. taking …\nThe 64-bit counterpart of <code>TableIndexI32</code>. A function table …\nA function address (table index) relative to the __…\nThe 64-bit counterpart of <code>TableIndexRelSleb</code>. A function …\nA function table index encoded as a 5-byte varint32. Used …\nThe 64-bit counterpart of <code>TableIndexSleb</code>. A function table …\nDifferent modes of initializing a table.\nA table number encoded as a 5-byte varuint32. Used for the …\nA module table section was received and the provided …\nA reader for the table section of a WebAssembly module.\nRepresents a table’s type.\nThe external kind is a tag.\nThe type is a tag.\nThe name is for tags.\nRepresents a tag kind.\nA module tag section was received, and the provided reader …\nA reader for the tags section of a WebAssembly module.\nA tag’s type.\nA <code>try_table</code> entries representation.\nA Wasm <code>try</code> control block.\nThe name is for the types.\nThe block produces a singular value of the given type ([] …\nA type index encoded as a 5-byte varuint32, e.g. the type …\nRepresents a reference to a type definition in a …\nA module type section was received and the provided reader …\nA reader for the type section of a WebAssembly module.\nThis symbol is not defined.\nAn unknown linking subsection.\nAn unknown name subsection.\nAn unknown section was found.\nThe uncompressed form of a <code>PackedIndex</code>.\nRepresents a 128-bit vector value.\nThe value type is v128.\nThis is a hidden symbol.\nThe storage type is a value type.\nRepresents the types of values in a WebAssembly module.\nIndicates the header of a WebAssembly module or component.\nTrait implemented by types that can visit all <code>Operator</code> …\nEnabled WebAssembly proposals and features.\nAddend to add to the address, or <code>0</code> if not applicable. The …\nIndicates if this relocation type has an associated …\nAlignment, stored as <code>n</code> where the actual alignment is <code>2^n</code>\nThe required alignment of the segment, encoded as a power …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nReturns the body of this function as a list of bytes.\nAttempts to match and see if this custom section is …\nGet the underlying index into a module’s types space, if …\nGet the underlying index into a module’s types space, if …\nGet the non-nullable version of this ref type.\nGet the underlying index into the containing recursion …\nGet the underlying index into the containing recursion …\nGet the underlying reference type, if any.\nIf this <code>Payload</code> represents a section in the original wasm …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGets the underlying bits of the 32-bit float.\nGets the underlying bits of the 64-bit float.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nComputes arity of given BlockType\nComputes arity of given BlockType\nReturns whether this feature is enabled in this feature …\nGets the bytes of the vector value.\nReturns the number of bytes remaining in the <code>BinaryReader</code>.\nOuter blocks which will receive exceptions.\nThe instruction’s offset relative to the function’s …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns whether this feature is enabled in this feature …\nReturns whether this feature is enabled in this feature …\nReturns whether this feature is enabled in this feature …\nReturns whether this feature is enabled in this feature …\nReturns whether this feature is enabled in this feature …\nReturns whether this feature is enabled in this feature …\nThe composite type of the subtype.\nCreate a reference to a concrete Wasm-defined type at the …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe global’s type.\nCurrent height of control stack\nReturns the count of total items within this section.\nReturns the <code>BinaryReader</code>’s current position.\nReturns whether this feature is enabled in this feature …\nThe actual contents of the custom section.\nThe data of the data segment.\nThe offset, relative to the start of the original module …\nReturns the default target of this <code>br_table</code> instruction.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCompute the type difference between the two given ref …\nArray element type.\nThe table’s element type.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nEnsures the reader is at the end.\nThe relocation entries.\nReturns whether the <code>BinaryReader</code> has reached the end of …\nDetermines if the reader is at the end of the operators.\nReturns whether this feature is enabled in this feature …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns whether this feature is enabled in this feature …\nIndicates the number of bytes that this relocation type …\nStruct fields.\nThe flags for the segment.\nThe flags.\nReturns whether this feature is enabled in this feature …\nUsed to implement routines for the <code>Operator</code> enum.\nUsed to implement the <code>VisitOperator</code> trait.\nThe stack frames for the core dump\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nConstruct a <code>PackedIndex</code> from an index into a module’s …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nAttempts to read <code>Self</code> from the provided binary reader, …\nConverts the section identifier provided with the section …\nConstruct a <code>PackedIndex</code> from an index into the index’s …\nConstruct a function <code>SubType</code>.\nThe function that these branch hints apply to.\nThe byte offset, from the start of the function’s body, …\nThe function type this tag uses.\nFunction type for a given continuation type\nThe function index in the module\nReturns whether this feature is enabled in this feature …\nReturns whether this feature is enabled in this feature …\nReturns whether this feature is enabled in this feature …\nGets a binary reader for this function body.\nGets a binary reader for the initialization expression.\nGets a binary reader from this operators reader.\nGets the count of locals in the function body.\nGets the locals reader for this function body.\nGets the operators reader for this function body.\nGets an operators reader for the initialization expression.\nWhich of the coredump’s globals are this instance’s …\nEither the outer blocks which will handle suspensions or …\nGet the heap type that this is a reference to.\nThe branch hints available for this function.\nGets a signed 128-bit integer value from the vector’s …\nThe index of the exported item.\nThe index of the symbol. Must not be an import.\nThe index of the data segment.\nThe index being named.\nThe indirect index of the name.\nIndex in the symbol table contained in the linking section …\nGets the index type for the table.\nGets the index type for the memory.\nThe initialization expression for the table.\nThe global’s initialization expression.\nInitial size of this table, in elements.\nInitial size of this memory, in wasm pages.\nThe type defined inside the composite type.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe instance that this stack frame belongs to.\nThe instances for the coredump\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads content of the code section.\nReturns an iterator over this type section which will only …\nReturns an iterator over this type section which will only …\nReturns an iterator which yields not only each item in …\nConverts to an iterator of operators paired with offsets.\nReturns an owning iterator of all subtypes in this …\nReturns an owning iterator of all subtypes in this …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nIs this the abstract untyped array reference type aka …\nTests whether <code>bytes</code> looks like a WebAssembly component.\nIs this a reference to an concrete type?\nIs this the abstract untyped cont reference type aka …\nTests whether <code>bytes</code> looks like a core WebAssembly module.\nWhether the type is defaultable, i.e. it is not a …\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns whether <code>BrTable</code> doesn’t have any labels apart …\nReturns whether there is an <code>end</code> opcode followed by eof …\nReturns whether there is an <code>end</code> opcode followed by eof …\nIs this an explicit recursion group?\nIs this the abstract external reference type aka …\nIs the subtype final.\nIs this the abstract untyped function reference type aka …\nIs this ref type nullable?\nIs this a packed storage type, i.e. one that must be sign- …\nReturns whether this value type is a “reference type”.\nIs this the abstract untyped struct reference type aka …\nThe initial elements of the element segment.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe kind of data segment.\nThe kind of the element segment.\nThe kind of the export.\nThe kind of the symbol.\nThe kind of tag\nBlockType and FrameKind of label with given index\nReturns whether this feature is enabled in this feature …\nReturns the number of <code>br_table</code> entries, not including the …\nReturns the number of entries in the table.\nThe locals for this stack frame (including function …\nMaximum alignment, stored as <code>n</code> where the actual alignment …\nOptional maximum size of the table, in elements.\nOptional maximum size of this memory, in wasm pages.\nWhich of the coredump’s memories are this instance’s …\nThe index of the memory this immediate points to.\nReturns whether this feature is enabled in this feature …\nWhether or not this is a 64-bit memory, using i64 as an …\nThe required alignment of the memory area, in bytes, …\nReturns whether this feature is enabled in this feature …\nSize of the memory area the loader should reserve for the …\nGet this error’s message.\nThe module being imported from.\nThe module that this is an instance of, as an index into a …\nA list of module names, which may be URLs, file paths, or …\nReturns whether this feature is enabled in this feature …\nReturns whether this feature is enabled in this feature …\nAre elements mutable.\nWhether or not the global is mutable.\nReturns whether this feature is enabled in this feature …\nThe name of the custom section.\nThe name of the process that created the core dump\nThe thread name\nThe name of the exported item.\nThe name of the imported item.\nThe name for the segment.\nThe name of this comdat.\nThe name for the index.\nThe name of the field.\nThe field name.\nThe map of names within the <code>index</code> prior.\nParses this section from the provided <code>reader</code>, derived from …\nParses this section from the provided <code>reader</code>, derived from …\nParses this section from the provided <code>reader</code>, derived from …\nCreates a new section reader from the provided contents.\nCreates a new reader for the specified section contents …\nCreates a new binary reader which will parse the <code>data</code> …\nCreates a new parser.\nConstructs a new <code>FunctionBody</code> for the given data and …\nParses this section from the provided <code>reader</code>, derived from …\nConstructs a new <code>CustomSectionReader</code> for the given data …\nConstructs a new <code>ConstExpr</code> from the given data and offset.\nCreates a new reader for the linking section contents …\nCreates a new reader for a <code>reloc.*</code> section starting at …\nCreates a new <code>FuncType</code> from the given <code>params</code> and <code>results</code>.\nCreate a new <code>RefType</code>.\nReads content of the code section with offsets.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nGet the nullable version of this ref type.\nGet the offset within the Wasm binary where the error …\nReturns the original offset that this parser is currently …\nThe offset within the segment. Must be &lt;= the segment’s …\nA fixed byte-offset that this memory immediate specifies.\nOffset in bytes from the start of the section indicated by …\nRead the next operator and compute its arity (param and …\nCompute the arity (param and result counts) of the …\nGets the original position of the reader.\nReturns whether the original byte offset of this section.\nReturns the current byte offset of the section within this …\nReturns whether the original byte offset of this section.\nGets the original position of the binary reader.\nReturns the original byte offset of this section.\nGets the original position of the reader.\nCompress this index into its packed form.\nThe log base 2 of the memory’s custom page size.\nReturns a shared slice to the parameter types of the …\nAttempts to parse a chunk of data.\nConvenience function that can be used to parse a module or …\nThe priority of the init function.\nReturns the range, as byte offsets, of this section within …\nReturns the range, as byte offsets, of this section within …\nReturns a range from the starting offset to the end of the …\nGets the range of the function body.\nThe range of bytes that specify this whole custom section …\nReturns the range, as byte offsets, of this section within …\nThe byte range of the entire section.\nThe range of the data segment.\nThe range of the the element segment.\nReads an item from the reader.\nReads a value of type <code>T</code> from this binary reader, advancing …\nReads an operator from the reader.\nAdvances the <code>BinaryReader</code> <code>size</code> bytes, and returns a slice …\nAdvances the <code>BinaryReader</code> four bytes to parse a 32 bit …\nAdvances the <code>BinaryReader</code> eight bytes to parse a 64 bit …\nReads a variable-length 32-bit size from the byte stream …\nReads the next available <code>Operator</code>.\nReads a length-prefixed list of bytes from this reader and …\nReads a variable-length 32-bit size from the byte stream …\nReads a WebAssembly string from the module.\nAdvances the <code>BinaryReader</code> four bytes and returns a <code>u32</code>.\nAdvances the <code>BinaryReader</code> eight bytes and returns a <code>u64</code>.\nAdvances the <code>BinaryReader</code> a single byte.\nReads a unlimited WebAssembly string from the module.\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nAdvances the <code>BinaryReader</code> up to eight bytes to parse a …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nAdvances the <code>BinaryReader</code> up to four bytes to parse a …\nReads an operator with its offset.\nReturns whether this feature is enabled in this feature …\nReturns whether this feature is enabled in this feature …\nByte range relative to the start of the section indicated …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns a shared slice to the result types of the <code>FuncType</code>.\nReturns whether this feature is enabled in this feature …\nIndex of section to which the relocations apply.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nGet the shared version of this ref type as long as it is …\nIs the composite type shared? This is part of the …\nWhether this table is shared or not.\nWhether or not this is a “shared” memory, indicating …\nWhether or not the global is shared.\nReturns whether this feature is enabled in this feature …\nReturns whether this feature is enabled in this feature …\nReturns whether this feature is enabled in this feature …\nThe size of the data, which can be zero. <code>offset + size</code> …\nExecutes <code>f</code> to skip some data in this binary reader and …\nSkip parsing the code section entirely.\nAdvances the <code>BinaryReader</code> past a WebAssembly string. This …\nThe values on the stack\nReturns whether this feature is enabled in this feature …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nComputes arity of given SubType\nComputes arity of given SubType\nType with given index\nSub type for a given reference type\nReturns the iterator for advancing through the subsections.\nThe list of supertype indexes. As of GC MVP, there can be …\nThe symbol index of init function (<em>not</em> the function index).\nThe member symbols of this comdat.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nWhether or not this is a 64-bit table.\nThe required alignment of the table area, in elements, …\nSize of the table area the loader should reserve for the …\nArity (param and result counts) of tag with given index\nReturns whether this feature is enabled in this feature …\nWhether or not the branch is hinted to be taken or not.\nReturns the list of targets that this <code>br_table</code> instruction …\nReturns whether this feature is enabled in this feature …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe global’s type.\nThe type of the imported item.\nThe block type describing the try block itself.\nRelocation entry type.\nThe type of this table, including its element type and its …\nIf this is a reference to a concrete Wasm-defined type, …\nType index of function with given index\nReturns the list of subtypes in the recursive type group.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUncompress this packed index into an actual <code>enum</code> that can …\nUnpack this storage type into the valtype that it is …\nUnwrap an <code>ArrayType</code> or panic.\nUnwrap a <code>ArrayType</code> or panic.\nUnwrap an <code>ContType</code> or panic.\nUnwrap a <code>ContType</code> or panic.\nUnwrap an <code>FuncType</code> or panic.\nUnwrap a <code>FuncType</code> or panic.\nUnwrap an <code>StructType</code> or panic.\nUnwrap a <code>StructType</code> or panic.\nThe values specified for this field\nReturns the version of linking metadata contained in this …\nThe field version.\nVisits the <code>Operator</code> <code>op</code> using the given <code>offset</code>.\nVisits the <code>Operator</code> <code>op</code> using the given <code>offset</code>.\nVisit the next available operator with the specified …\nVisit a single operator with the specified <code>VisitOperator</code> …\nReturns whether this feature is enabled in this feature …\nThis many bytes of the <code>data</code> input to <code>Parser::parse</code> were …\nThe value that we actually parsed.\nThe memory index for the data segment.\nThe initialization expression for the data segment.\nThe initial expression of the element segment.\nThe index of the table being initialized.\nWhether the type is shared.\nThe actual heap type.\nThe contents of this subsection.\nThe range of bytes, relative to the start of the original …\nThe identifier for this subsection.\nThe contents of this subsection.\nThe specified name.\nThe byte range that <code>name</code> occupies in the original binary.\nThe range of bytes, relative to the start of the original …\nThe identifier for this subsection.\nThe contents of this section.\nThe number of data segments.\nThe number of functions in this section.\nThe encoding format being parsed.\nThe start function index\nThe 8-bit identifier for this section.\nThe version number found in the header.\nThe range of bytes that were parsed to consume the header …\nThe range of bytes that specify the <code>func</code> field, specified …\nThe range of bytes that specify the <code>count</code> field, specified …\nThe range of bytes that represent this section, specified …\nThe range of bytes, relative to the start of the original …\nThe size, in bytes, of the remaining contents of this …\nThe flags for the symbol.\nThe flags for the symbol.\nThe flags for the symbol.\nThe flags for the symbol.\nThe flags for the symbol.\nThe flags for the symbol.\nThe index of the function corresponding to this symbol.\nThe index of the global corresponding to this symbol.\nThe index of the event corresponding to this symbol.\nThe index of the table corresponding to this symbol.\nThe name for the function, if it is defined or uses an …\nThe name for the symbol.\nThe name for the global, if it is defined or uses an …\nThe name for the event, if it is defined or uses an …\nThe name for the table, if it is defined or uses an …\nThe index of the function corresponding to this symbol.\nThe definition of the data symbol, if it is defined.")