searchState.loadedDescShard("elsa", 0, "<em>ðŸŽµ Immutability never bothered me anyway ðŸŽ¶</em>\n<strong>This module is experimental</strong>\nAppend-only version of <code>indexmap::IndexMap</code> where insertion â€¦\nGet mutable access to the underlying <code>IndexMap</code>.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the key-value mapping corresponding â€¦\nExamples\nIf the key exists in the map, returns a reference to the â€¦\nIf the key exists in the map, returns a reference to the â€¦\nCalls <code>U::from(self)</code>.\nCollects the contents of this map into a vector of tuples.\nReturns true if the map contains no elements.\nApplies a function to the owner of the value corresponding â€¦\nAppend-only version of <code>indexmap::IndexSet</code> where insertion â€¦\nGet mutable access to the underlying <code>IndexSet</code>.\nReturns the argument unchanged.\nReturns a reference to the value passed as argument if â€¦\nReturns a reference to the value passed as argument if â€¦\nReturns a reference to value at the index passed as â€¦\nIf the value exists in the set, returns a reference to the â€¦\nIf the key exists in the set, returns a reference to the â€¦\nCalls <code>U::from(self)</code>.\nAppend-only version of <code>std::collections::BTreeMap</code> where â€¦\nAppend-only version of <code>std::collections::HashMap</code> where â€¦\nGet mutable access to the underlying <code>HashMap</code>.\nGet mutable access to the underlying <code>HashMap</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the key and value matching a â€¦\nExamples\nExamples\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollects the contents of this map into a vector of tuples.\nCollects the contents of this map into a vector of tuples.\nExamples\nExamples\nExamples\nExamples\nApplies a function to the owner of the value corresponding â€¦\nApplies a function to the owner of the value corresponding â€¦\nAppend-only threadsafe version of â€¦\nAppend-only threadsafe version of <code>std::collections::HashMap</code>â€¦\nAppend-only threadsafe version of <code>std::vec::Vec</code> where â€¦\nIterator over FrozenVec, obtained via <code>.iter()</code>\nAppend-only threadsafe version of <code>std::vec::Vec</code> where â€¦\nGet mutable access to the underlying <code>HashMap</code>.\nGet mutable access to the underlying vector.\nCreates an empty <code>LockFreeFrozenVec</code> that does not allocate â€¦\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nLoad an element (if it exists). This operation is â€¦\nReturns a reference to the value corresponding to the key.\nReturns a copy of the value corresponding to the key.\nIf the key exists in the map, returns a reference to the â€¦\nIf the key exists in the map, returns a reference to the â€¦\nIf the key exists in the map, returns a reference to the â€¦\nLoad an element (if it exists). This operation is â€¦\nExamples\nIf the key exists in the map, returns a reference to the â€¦\nInsert a new value into the map. Does nothing if the key â€¦\nIf the key exists in the map, returns a reference to the â€¦\nIf the key exists in the map, returns a reference to the â€¦\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollects the contents of this map into a vector of tuples.\nCollects the contents of this map into a vector of tuples.\nReturns the internal vector backing this structure\nExamples\nReturns <code>true</code> if the vector contains no elements.\nExamples\nReturns an iterator over the vector.\nExamples\nReturns the number of elements in the vector.\nExamples\nApplies a function to the owner of the value corresponding â€¦\nApplies a function to the owner of the value corresponding â€¦\nPushes an element to the vector, potentially allocating â€¦\nPush, immediately getting a reference to the element\nPush, immediately getting a an index of the element\nAppend-only version of <code>std::vec::Vec</code> where insertion does â€¦\nIterator over FrozenVec, obtained via <code>.iter()</code>\nGet mutable access to the underlying vector.\nBinary searches this sorted vector for a given element, â€¦\nBinary searches this sorted vector with a comparator â€¦\nBinary searches this sorted vector with a key extraction â€¦\nReturns the first element of the vector, or <code>None</code> if empty.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to an element.\nReturns a copy of an element.\nReturns a reference to an element, without doing bounds â€¦\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the frozen vector into a plain vector.\nReturns <code>true</code> if the vector contains no elements.\nReturns an iterator over the vector.\nReturns the last element of the vector, or <code>None</code> if empty.\nReturns the number of elements in the vector.\nConstructs a new, empty vector.\nReturns the index of the partition point according to the â€¦\nAppends an element to the back of the vector.\nPush, immediately getting a reference to the element")