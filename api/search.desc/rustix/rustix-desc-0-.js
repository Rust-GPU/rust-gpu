searchState.loadedDescShard("rustix", 0, "<code>rustix</code> provides efficient memory-safe and I/O-safe …\nA macro for <code>CStr</code> literals.\nExport the <code>*Fd</code> types and traits that are used in rustix’…\nUtilities related to FFI bindings.\nFilesystem operations.\nI/O operations.\nUnsafe <code>ioctl</code> API.\nFilesystem path operations.\nA trait to borrow the file descriptor from an underlying …\nA trait to extract the raw file descriptor from an …\nA borrowed file descriptor.\nA trait to express the ability to construct an object from …\nA trait to express the ability to consume an object and …\nAn owned file descriptor.\nRaw file descriptors.\nBorrows the file descriptor.\nExtracts the raw file descriptor.\nReturn a <code>BorrowedFd</code> holding the given raw file descriptor.\nTakes ownership of a <code>TcpListener</code>’s socket file …\nTakes ownership of a <code>File</code>’s underlying file descriptor.\nTakes ownership of a <code>ChildStderr</code>’s file descriptor.\nTakes ownership of a <code>UnixDatagram</code>’s socket file …\nReturns the argument unchanged.\nTakes ownership of a <code>ChildStdin</code>’s file descriptor.\nTakes ownership of a <code>UnixListener</code>’s socket file …\nTakes ownership of a <code>ChildStdout</code>’s file descriptor.\nTakes ownership of a <code>UdpSocket</code>’s file descriptor.\nTakes ownership of a <code>UnixStream</code>’s socket file descriptor.\nTakes ownership of a <code>TcpStream</code>’s socket file descriptor.\nReturns the argument unchanged.\nConstructs a new instance of <code>Self</code> from the given raw file …\nConstructs a new instance of <code>Self</code> from the given raw file …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this object, returning the raw underlying file …\nCreates a new <code>OwnedFd</code> instance that shares the same …\nCreates a new <code>OwnedFd</code> instance that shares the same …\nRepresentation of a borrowed C string.\nA type representing an owned, C-compatible, nul-terminated …\nAn error indicating that a nul byte was not in the …\nAn error indicating that an interior nul byte was found.\nReturns the contents of this <code>CString</code> as a slice of bytes.\nEquivalent to <code>CString::as_bytes()</code> except that the returned …\nExtracts a <code>CStr</code> slice containing the entire string.\nReturns the inner pointer to this C string.\nIterates over the bytes in this C string.\nEquivalent to C’s <code>char</code> type.\nReturns the length of <code>self</code>. Like C’s <code>strlen</code>, this does …\nCreates an empty <code>CString</code>.\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>CString</code>, by copying the …\nConverts a Box&lt;CStr&gt; into a <code>CString</code> without copying or …\nConverts a Vec&lt;NonZero&lt;u8&gt;&gt; into a <code>CString</code> without copying …\nConverts a &amp;CStr into a <code>CString</code> by copying the contents …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a C string wrapper from a byte slice with any …\nCreates a C string wrapper from a byte slice with exactly …\nUnsafely creates a C string wrapper from a byte slice.\nWraps a raw C string with a safe C string wrapper.\nRetakes ownership of a <code>CString</code> that was transferred to C …\nCreates a C-compatible string by consuming a byte vector, …\nAttempts to converts a Vec&lt;u8&gt; to a <code>CString</code>.\nConverts a Vec&lt;u8&gt; to a <code>CString</code> without checking the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>CString</code> into a boxed <code>CStr</code>.\nConsumes the <code>CString</code> and returns the underlying byte …\nEquivalent to <code>CString::into_bytes()</code> except that the …\nConverts a Box&lt;CStr&gt; into a <code>CString</code> without copying or …\nConsumes the <code>CString</code> and transfers ownership of the string …\nConverts the <code>CString</code> into a <code>String</code> if it contains valid …\nConsumes this error, returning the underlying vector of …\nReturns <code>true</code> if <code>self.to_bytes()</code> has a length of 0.\nCreates a new C-compatible string from a container of …\nReturns the position of the nul byte in the slice that …\nConverts this C string to a byte slice.\nConverts this C string to a byte slice containing the …\nYields a &amp;str slice if the <code>CStr</code> contains valid UTF-8.\nConverts a <code>CStr</code> into a Cow&lt;str&gt;.\n<code>O_ACCMODE</code>\n<code>COPYFILE_ACL</code>\n<code>COPYFILE_ALL</code>\n<code>O_APPEND</code>\n<code>*_OK</code> constants for use with <code>accessat</code>.\n<code>AT_*</code> constants for use with <code>openat</code>, <code>statat</code>, and other <code>*at</code> …\n<code>S_IFBLK</code>\n<code>O_CLOEXEC</code>\n<code>O_CREAT</code>\n<code>XATTR_CREATE</code>\n<code>AT_FDCWD</code>—A handle representing the current working …\n<code>S_IFCHR</code>\n<code>CLONE_*</code> constants for use with <code>fclonefileat</code>.\n<code>COPYFILE_*</code> constants for use with <code>fcopyfile</code>.\nSets the offset to the current position plus the specified …\n<code>COPYFILE_DATA</code>\n<code>O_DIRECTORY</code>\n<code>O_DSYNC</code>\nSets the offset to the current position plus the specified …\n<code>dev_t</code>\n<code>DIR*</code>\n<code>struct dirent</code>\nRe-export types common to POSIX-ish platforms. …\n<code>S_IFDIR</code>\n<code>AT_EACCESS</code>\n<code>O_EXCL</code>\n<code>X_OK</code>\n<code>F_OK</code>\nSets the offset to the size of this object plus the …\n<code>O_FSYNC</code>\n<code>FALLOC_FL_*</code> constants for use with <code>fallocate</code>.\n<code>S_IFIFO</code>\nRe-export types common to POSIX-ish platforms. …\n<code>S_IF*</code> constants for use with <code>mknodat</code> and <code>Stat</code>’s <code>st_mode</code> …\nRe-export types common to POSIX-ish platforms. …\n<code>LOCK_*</code> constants for use with <code>flock</code> and <code>fcntl_lock</code>.\n<code>gid_t</code>—A Unix group ID.\nSets the offset to the current position plus the specified …\n<code>LOCK_EX</code>\n<code>LOCK_SH</code>\n<code>COPYFILE_METADATA</code>\nRe-export types common to POSIX-ish platforms. …\n<code>S_I*</code> constants for use with <code>openat</code>, <code>chmodat</code>, and <code>fchmod</code>.\n<code>O_NOCTTY</code>\n<code>O_NOFOLLOW</code>\n<code>CLONE_NOFOLLOW</code>\n<code>O_NONBLOCK</code>\n<code>CLONE_NOOWNERCOPY</code>\n<code>ST_NOSUID</code>\n<code>LOCK_EX | LOCK_NB</code>\n<code>LOCK_SH | LOCK_NB</code>\n<code>LOCK_UN | LOCK_NB</code>\nA type for the <code>tv_nsec</code> field of <code>Timespec</code>.\n<code>O_*</code> constants for use with <code>openat</code>.\nRe-export types common to POSIX-ish platforms. …\n<code>O_RDONLY</code>\n<code>ST_RDONLY</code>\n<code>O_RDWR</code>\n<code>R_OK</code>\n<code>AT_REMOVEDIR</code>\n<code>XATTR_REPLACE</code>\n<code>S_IRGRP</code>\nA <code>Uid</code> corresponding to the root user (uid 0).\nA <code>Gid</code> corresponding to the root group (gid 0).\n<code>S_IROTH</code>\n<code>S_IRUSR</code>\nSimilar to <code>ACCMODE</code>, but just includes the read/write …\n<code>S_IRWXG</code>\n<code>S_IRWXO</code>\n<code>S_IRWXU</code>\n<code>mode_t</code>\n<code>S_IFREG</code>\n<code>COPYFILE_SECURITY</code>\n<code>S_ISGID</code>\n<code>COPYFILE_STAT</code>\n<code>S_ISUID</code>\n<code>S_ISVTX</code>\n<code>AT_SYMLINK_FOLLOW</code>\n<code>AT_SYMLINK_NOFOLLOW</code>\n<code>O_SYNC</code>\nA type for the <code>tv_sec</code> field of <code>Timespec</code>.\nEnumeration of possible methods to seek within an I/O …\n<code>S_IFSOCK</code>\nSets the offset to the provided number of bytes.\n<code>struct stat</code> for use with <code>statat</code> and <code>fstat</code>.\nExtension trait for accessing timestamp fields of <code>Stat</code>.\n<code>struct statfs</code> for use with <code>statfs</code> and <code>fstatfs</code>.\n<code>struct statvfs</code> for use with <code>statvfs</code> and <code>fstatvfs</code>.\n<code>ST_*</code> constants for use with <code>StatVfs</code>.\n<code>S_IFLNK</code>\n<code>O_TRUNC</code>\n<code>struct timespec</code>\nTimestamps used by <code>utimensat</code> and <code>futimens</code>.\n<code>UTIME_NOW</code> for use with <code>utimensat</code>.\n<code>UTIME_OMIT</code> for use with <code>utimensat</code>.\n<code>uid_t</code>—A Unix user ID.\nAn unknown filesystem object.\n<code>LOCK_UN</code>\n<code>S_IWGRP</code>\n<code>S_IWOTH</code>\n<code>W_OK</code>\n<code>O_WRONLY</code>\n<code>S_IWUSR</code>\n<code>COPYFILE_XATTR</code>\n<code>S_IXGRP</code>\n<code>S_IXOTH</code>\n<code>S_IXUSR</code>\n<code>XATTR_*</code> constants for use with <code>setxattr</code>, and other …\n<code>access(path, access)</code>—Tests permissions for a file or …\n<code>faccessat(dirfd, path, access, flags)</code>—Tests permissions …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nConverts a <code>Uid</code> into a <code>RawUid</code>.\nConverts a <code>Gid</code> into a <code>RawGid</code>.\nConstruct an <code>st_mode</code> value from a <code>Mode</code>.\nConstruct an <code>st_mode</code> value from a <code>FileType</code>.\nReturn the value of the <code>st_atime</code> field, casted to the …\nReturns the last access time of the file, in seconds since …\nReturns the last access time of the file, in nanoseconds …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the block size for filesystem I/O.\nReturns the number of blocks allocated to the file, in …\n<code>chmod(path, mode)</code>—Sets file or directory permissions.\n<code>fchmodat(dirfd, path, mode, flags)</code>—Sets file or …\n<code>chown(path, owner, group)</code>—Sets open file or directory …\n<code>fchownat(dirfd, path, owner, group, flags)</code>—Sets file or …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\n<code>copyfile_state_alloc()</code>\n<code>copyfile_state_free(state)</code>\n<code>copyfile_state_get(state, flags, dst)</code>\n<code>copyfile_state_get(state, COPYFILE_STATE_COPIED)</code>\n<code>copyfile_state_t</code>—State for use with <code>fcopyfile</code>.\nReturn the value of the <code>st_ctime</code> field, casted to the …\nReturns the last status change time of the file, in …\nReturns the last status change time of the file, in …\nPass custom flags to the <code>flags</code> argument of <code>open</code>.\nReturn the value of <code>CWD</code>.\nReturns the ID of the device containing the file.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\n<code>fallocate(fd, mode, offset, len)</code>—Adjusts file allocation.\n<code>fchmod(fd, mode)</code>—Sets open file or directory permissions.\n<code>fchown(fd, owner, group)</code>—Sets open file or directory …\n<code>fclonefileat(src, dst_dir, dst, flags)</code>—Efficiently …\n<code>fcntl(fd, F_FULLFSYNC)</code>\n<code>fcntl(fd, F_GETFL)</code>—Returns a file descriptor’s access …\n<code>fcntl(fd, F_GLOBAL_NOCACHE, value)</code>—Turn data caching off …\n<code>fcntl(fd, F_SETLK)</code>—Acquire or release an <code>fcntl</code>-style …\n<code>fcntl(fd, F_NOCACHE, value)</code>—Turn data caching off or on …\n<code>fcntl(fd, F_RDADVISE, radvisory { offset, len })</code>\n<code>fcntl(fd, F_SETFL, flags)</code>—Sets a file descriptor’s …\n<code>fcopyfile(from, to, state, flags)</code>\n<code>fgetxattr(fd, name, value.as_ptr(), value.len())</code>—Get …\nReturns the file name of this directory entry.\nReturns the type of this directory entry.\n<code>flistxattr(fd, list.as_ptr(), list.len())</code>—List extended …\n<code>flock(fd, operation)</code>—Acquire or release an advisory lock …\n<code>fremovexattr(fd, name)</code>—Remove an extended filesystem …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSupport conversions from <code>Mode</code> to raw mode values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSupport conversions from raw mode values to <code>Mode</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nConverts a <code>RawUid</code> into a <code>Uid</code>.\nConverts a <code>RawGid</code> into a <code>Gid</code>.\nConstruct a <code>Mode</code> from the mode bits of the <code>st_mode</code> field …\nConstruct a <code>FileType</code> from the <code>S_IFMT</code> bits of the <code>st_mode</code> …\n<code>fsetxattr(fd, name, value.as_ptr(), value.len(), flags)</code>…\n<code>fstat(fd)</code>—Queries metadata for an open file or directory.\n<code>fstatfs(fd)</code>—Queries filesystem statistics for an open …\n<code>fstatvfs(fd)</code>—Queries filesystem statistics for an open …\n<code>fsync(fd)</code>—Ensures that file data and metadata is written …\n<code>ftruncate(fd, length)</code>—Sets the length of a file.\n<code>futimens(fd, times)</code>—Sets timestamps for an open file or …\n<code>fcntl(fd, F_GETPATH)</code>\n<code>getxattr(path, name, value.as_ptr(), value.len())</code>—Get …\nReturns the group ID of the owner of this file.\nReturns the inode number.\nReturns the underlying <code>d_ino</code> field in the contained <code>dirent</code> …\nReturn the inode number of this directory entry.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if this file type is a block device.\nReturns <code>true</code> if this file type is a char device.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns <code>true</code> if this file type is a fifo.\n<code>fcntl(fd, F_GETFL) &amp; O_ACCMODE</code>\nTest whether this uid represents the root user (uid 0).\nTest whether this gid represents the root group (gid 0).\nReturns <code>true</code> if this file type is a socket.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe timestamp of the last access to a filesystem object.\nThe timestamp of the last modification of a filesystem …\n<code>lgetxattr(path, name, value.as_ptr(), value.len())</code>—Get …\n<code>link(old_path, new_path)</code>—Creates a hard link.\n<code>linkat(old_dirfd, old_path, new_dirfd, new_path, flags)</code>…\n<code>listxattr(path, list.as_ptr(), list.len())</code>—List extended …\n<code>llistxattr(path, list.as_ptr(), list.len())</code>—List …\n<code>lremovexattr(path, name)</code>—Remove an extended filesystem …\n<code>setxattr(path, name, value.as_ptr(), value.len(), flags)</code>…\n<code>lstat(path)</code>—Queries metadata for a file or directory, …\n<code>major(dev)</code>\n<code>makedev(maj, min)</code>\n<code>minor(dev)</code>\n<code>mkdir(path, mode)</code>—Creates a directory.\n<code>mkdirat(fd, path, mode)</code>—Creates a directory.\nSets the mode bits that a new file will be created with.\nReturns the rights applied to this file.\nReturn the value of the <code>st_mtime</code> field, casted to the …\nReturns the last modification time of the file, in seconds …\nReturns the last modification time of the file, in …\nTake ownership of <code>fd</code> and construct a <code>Dir</code> that reads …\nReturns the number of hard links pointing to this file.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n<code>open(path, oflags, mode)</code>—Opens a file.\n<code>openat(dirfd, path, oflags, mode)</code>—Opens a file.\nReturns the device ID of this file (if it is a special …\n<code>readdir(self)</code>, where <code>None</code> means the end of the directory.\nReads a number of bytes starting from a given offset.\nReads the exact number of bytes required to fill <code>buf</code> from …\nBorrow <code>fd</code> and construct a <code>Dir</code> that reads entries from the …\nLike <code>read_at</code>, except that it reads into a slice of buffers.\n<code>readlink(path)</code>—Reads the contents of a symlink.\n<code>readlinkat(fd, path)</code>—Reads the contents of a symlink.\n<code>readlinkat(fd, path)</code>—Reads the contents of a symlink, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\n<code>removexattr(path, name)</code>—Remove an extended filesystem …\n<code>rename(old_path, new_path)</code>—Renames a file or directory.\n<code>renameat(old_dirfd, old_path, new_dirfd, new_path)</code>…\n<code>rewinddir(self)</code>\n<code>rmdir(path)</code>—Removes a directory.\n<code>lseek(fd, offset, whence)</code>—Repositions a file descriptor …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\n<code>setxattr(path, name, value.as_ptr(), value.len(), flags)</code>…\nReturns the total size of this file in bytes.\n<code>stat(path)</code>—Queries metadata for a file or directory.\n<code>fstat(self)</code>\n<code>fstatat(dirfd, path, flags)</code>—Queries metadata for a file …\n<code>statfs</code>—Queries filesystem metadata.\n<code>fstatfs(self)</code>\n<code>statvfs</code>—Queries filesystem metadata, POSIX version.\n<code>fstatvfs(self)</code>\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\n<code>symlink(old_path, new_path)</code>—Creates a symlink.\n<code>symlinkat(old_path, new_dirfd, new_path)</code>—Creates a …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n<code>sync</code>—Flush cached filesystem data for all filesystems.\n<code>lseek(fd, 0, SEEK_CUR)</code>—Returns the current position …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the user ID of the owner of this file.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>unlink(path)</code>—Unlinks a file.\n<code>unlinkat(fd, path, flags)</code>—Unlinks a file or remove a …\n<code>utimensat(dirfd, path, times, flags)</code>—Sets file or …\nAttempts to write an entire buffer starting from a given …\nWrites a number of bytes starting from a given offset.\nLike <code>write_at</code>, except that it writes from a slice of …\n<code>EACCES</code>\n<code>EADDRINUSE</code>\n<code>EADDRNOTAVAIL</code>\n<code>EAFNOSUPPORT</code>\n<code>EAGAIN</code>\n<code>EALREADY</code>\n<code>EAUTH</code>\n<code>EBADF</code>\n<code>EBADMSG</code>\n<code>EBADRPC</code>\n<code>EBUSY</code>\n<code>ECANCELED</code>\n<code>ECHILD</code>\n<code>FD_CLOEXEC</code>\n<code>ECONNABORTED</code>\n<code>ECONNREFUSED</code>\n<code>ECONNRESET</code>\n<code>EDEADLK</code>\n<code>EDESTADDRREQ</code>\n<code>EDOM</code>\n<code>EDQUOT</code>\n<code>O_*</code> constants for use with <code>dup2</code>.\n<code>EEXIST</code>\nContains the error value\n<code>errno</code>—An error code.\n<code>EFAULT</code>\n<code>EFBIG</code>\n<code>EFTYPE</code>\n<code>FD_*</code> constants for use with <code>fcntl_getfd</code> and <code>fcntl_setfd</code>.\n<code>EHOSTDOWN</code>\n<code>EHOSTUNREACH</code>\n<code>EIDRM</code>\n<code>EILSEQ</code>\n<code>EINPROGRESS</code>\n<code>EINTR</code>\n<code>EINVAL</code>\n<code>EIO</code>\n<code>EISCONN</code>\n<code>EISDIR</code>\nA buffer type used with <code>Write::write_vectored</code>.\nA buffer type used with <code>Read::read_vectored</code>.\n<code>ELOOP</code>\n<code>EMFILE</code>\n<code>EMLINK</code>\n<code>EMSGSIZE</code>\n<code>EMULTIHOP</code>\n<code>ENAMETOOLONG</code>\n<code>ENEEDAUTH</code>\n<code>ENETDOWN</code>\n<code>ENETRESET</code>\n<code>ENETUNREACH</code>\n<code>ENFILE</code>\n<code>ENOATTR</code>\n<code>ENOBUFS</code>\n<code>ENODATA</code>\n<code>ENODEV</code>\n<code>ENOENT</code>\n<code>ENOEXEC</code>\n<code>ENOLCK</code>\n<code>ENOLINK</code>\n<code>ENOMEM</code>\n<code>ENOMSG</code>\n<code>ENOPROTOOPT</code>\n<code>ENOSPC</code>\n<code>ENOSR</code>\n<code>ENOSTR</code>\n<code>ENOSYS</code>\n<code>ENOTBLK</code>\n<code>ENOTCONN</code>\n<code>ENOTDIR</code>\n<code>ENOTEMPTY</code>\n<code>ENOTRECOVERABLE</code>\n<code>ENOTSOCK</code>\n<code>ENOTSUP</code>\n<code>ENOTTY</code>\n<code>ENXIO</code>\n<code>EOPNOTSUPP</code>\n<code>EOVERFLOW</code>\n<code>EOWNERDEAD</code>\nContains the success value\n<code>EPERM</code>\n<code>EPFNOSUPPORT</code>\n<code>EPIPE</code>\n<code>EPROCLIM</code>\n<code>EPROCUNAVAIL</code>\n<code>EPROGMISMATCH</code>\n<code>EPROGUNAVAIL</code>\n<code>EPROTO</code>\n<code>EPROTONOSUPPORT</code>\n<code>EPROTOTYPE</code>\n<code>ERANGE</code>\n<code>EREMOTE</code>\n<code>EROFS</code>\n<code>ERPCMISMATCH</code>\nA specialized <code>Result</code> type for <code>rustix</code> APIs.\n<code>ESHUTDOWN</code>\n<code>ESOCKTNOSUPPORT</code>\n<code>ESPIPE</code>\n<code>ESRCH</code>\n<code>ESTALE</code>\n<code>ETIME</code>\n<code>ETIMEDOUT</code>\n<code>E2BIG</code>\n<code>ETOOMANYREFS</code>\n<code>ETXTBSY</code>\n<code>EUSERS</code>\n<code>EWOULDBLOCK</code>\n<code>EXDEV</code>\nAdvance the internal cursor of the slice.\nAdvance the internal cursor of the slice.\nAdvance a slice of slices.\nAdvance a slice of slices.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n<code>close(raw_fd)</code>—Closes a <code>RawFd</code> directly.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\n<code>dup(fd)</code>—Creates a new <code>OwnedFd</code> instance that shares the …\n<code>dup2(fd, new)</code>—Changes the file description of a file …\n<code>dup3(fd, new, flags)</code>—Changes the file description of a …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\n<code>fcntl(fd, F_DUPFD_CLOEXEC)</code>—Creates a new <code>OwnedFd</code> …\n<code>fcntl(fd, F_GETFD)</code>—Returns a file descriptor’s flags.\n<code>fcntl(fd, F_SETFD, flags)</code>—Sets a file descriptor’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nExtract an <code>Errno</code> value from a <code>std::io::Error</code>.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nConstruct an <code>Errno</code> from a raw OS error number.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ioctl(fd, FIOCLEX, NULL)</code>—Set the close-on-exec flag.\n<code>ioctl(fd, FIONBIO, &amp;value)</code>—Enables or disables …\n<code>ioctl(fd, FIONREAD)</code>—Returns the number of bytes ready to …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nShorthand for <code>std::io::Error::from(self).kind()</code>.\nCreates a new <code>IoSliceMut</code> wrapping a byte slice.\nCreates a new <code>IoSlice</code> wrapping a byte slice.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n<code>pread(fd, buf, offset)</code>—Reads from a file at a given …\n<code>pread(fd, buf, offset)</code>—Reads from a file at a given …\n<code>preadv(fd, bufs, offset)</code>—Reads from a file at a given …\n<code>pwrite(fd, bufs)</code>—Writes to a file at a given position.\n<code>pwritev(fd, bufs, offset)</code>—Writes to a file at a given …\nExtract the raw OS error number from this error.\n<code>read(fd, buf)</code>—Reads from a stream.\n<code>read(fd, buf)</code>—Reads from a stream.\n<code>readv(fd, bufs)</code>—Reads from a stream into multiple …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>f</code> until it either succeeds or fails other than …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n<code>write(fd, buf)</code>—Writes to a stream.\n<code>writev(fd, bufs)</code>—Writes to a stream from multiple …\nProvides a bad opcode at compile time.\nTrait for something that provides an <code>ioctl</code> opcode at …\nThe direction that an <code>ioctl</code> is going.\nImplements the traditional “getter” pattern for <code>ioctl</code>s.\nDoes the <code>ioctl</code> mutate any data in the userspace?\nA trait defining the properties of an <code>ioctl</code> command.\nThe type used by the <code>ioctl</code> to signify the output.\nImplements an <code>ioctl</code> with no real arguments.\nNone of the above.\nProvides a <code>None</code> code at compile time.\nThe opcode.\nThe opcode used by this <code>ioctl</code> command.\nThe opcode used by an <code>Ioctl</code>.\nThe type of the output data.\nThe type used by the <code>ioctl</code> to signify the command.\nRead data from the kernel.\nProvides a read code at compile time.\nRead and write data to the kernel.\nProvides a read/write code at compile time.\nImplements the pattern for <code>ioctl</code>s where a pointer argument …\nImplements an “updater” pattern for <code>ioctl</code>s.\nWrite data to the kernel.\nProvides a write code at compile time.\nGet a pointer to the data to be passed to the <code>ioctl</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new opcode from a direction, group, number, and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerform an <code>ioctl</code> call.\nCreate a new no-argument <code>ioctl</code> object.\nCreate a new getter-style <code>ioctl</code> object.\nCreate a new pointer setter-style <code>ioctl</code> object.\nCreate a new pointer updater-style <code>ioctl</code> object.\nCreate a new non-mutating opcode from a group, a number, …\nCreate a new old <code>Opcode</code> from a raw opcode.\nCast the output data to the correct type.\nGet the raw opcode.\nCreate a new reading opcode from a group, a number and the …\nCreate a new reading and writing opcode from a group, a …\nCreate a new writing opcode from a group, a number and the …\nA trait for passing path arguments.\nReturns a view of this string as a maybe-owned <code>CStr</code>.\nReturns a view of this string as a string slice.\nConsumes <code>self</code> and returns a view of this string as a …\nRuns a closure with <code>self</code> passed in as a <code>&amp;CStr</code>.\nRuns a closure on <code>arg</code> where <code>A</code> is mapped to a <code>&amp;CStr</code>\nReturns a potentially-lossy rendering of this string as a …")