searchState.loadedDescShard("convert_case", 0, "Converts to and from various cases.\nAlternating case strings are delimited by spaces.  …\nCamel case strings are lowercase, but for every word …\nDefines the type of casing a string can be.\nDescribes items that can be converted into a case.\nCobol case strings are delimited by hyphens <code>-</code> and are all …\nFlat case strings are all lowercase, with no delimiter.  …\nHolds information about parsing before converting into a …\nKebab case strings are delimited by hyphens <code>-</code> and are all …\nLowercase strings are delimited by spaces and all …\nPascal case strings are lowercase, but for every word the …\nScreaming snake case is an alternative name for upper …\nSnake case strings are delimited by underscores <code>_</code> and are …\nTitle case strings are delimited by spaces. Only the …\nToggle case strings are delimited by spaces.  All …\nTrain case strings are delimited by hyphens <code>-</code>.  All …\nUppercase strings are delimited by spaces and all …\nUpper camel case is an alternative name for Pascal case.\nUpper flat case strings are all uppercase, with no …\nUpper snake case strings are delimited by underscores <code>_</code> …\nReturns a vector with all case enum variants.  This was …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>FromCasing</code> struct, which saves information about …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReferences <code>self</code> and converts to the given case.")