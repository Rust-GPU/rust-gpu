searchState.loadedDescShard("internal_iterator", 0, "Internal iterator equivalent of <code>std::iter::Iterator</code>.\nA helper type used in <code>from_fn</code>.\nAn iterator that links two iterators together, in a chain.\nAn iterator that clones the elements of an underlying …\nAn iterator that copies the elements of an underlying …\nAn iterator that yields the current count and the element …\nAn iterator that filters the elements of <code>iter</code> with …\nAn iterator that uses <code>f</code> to both filter and map elements …\nAn iterator that maps each element to an iterator, and …\nAn iterator returned by <code>from_fn</code>.\nConversion from an <code>InternalIterator</code>.\nAn iterator that calls a function with a reference to each …\nA wrapper type to convert <code>std::iter::Iterator</code> to …\nInternal iterator over a collection.\nConversion to an <code>InternalIterator</code>.\nConcrete iterator type returned by the conversion.\nType of items yielded by the iterator.\nThe type of the elements being iterated over.\nExtension trait to add conversion to <code>InternalIterator</code> for …\nAn iterator that maps the values of <code>iter</code> with <code>f</code>.\nAn iterator that skips over <code>n</code> elements of <code>iter</code>.\nAn iterator that only iterates over the first <code>n</code> iterations …\nTests if every element of the iterator matches the …\nTests if any element of the iterator matches the predicate.\nTakes two iterators and returns an iterator that first …\nCreates an iterator yields cloned elements of the original …\nTransforms the iterator into a collection.\nCreates an iterator yields copied elements of the original …\nReturns the number of elements yielded by the iterator.\nCreates an iterator that adds the index to every value of …\nCreates an iterator which only yields elements matching …\nA combination of <code>InternalIterator::filter</code> and …\nReturns the first element of the iterator that matches the …\nApplies function to the elements of iterator and returns …\nCreates and iterator which maps over the elements and …\nFolds every element into an accumulator by applying an …\nRun the closure on each element.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an internal iterator from provided closure.\nConvert from an iterator.\nRun the closure on each element, while passing that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an <code>std::iter::Iterator</code> to an <code>InternalIterator</code>.\nConvert this type to an internal iterator.\nReturns the last element.\nTransform each element in the iterator.\nReturns the maximum element of an iterator.\nReturns the maximum element of an iterator using a custom …\nReturns the element that gives the maximum value from the …\nReturns the minimum element of an iterator.\nReturns the minimum element of an iterator using a custom …\nReturns the element that gives the minimum value from the …\nReturns the first element of the iterator.\nReturns the <code>n</code>th element of the iterator.\nReturns the index of the first element matching the …\nSkip first <code>n</code> elements of the iterator.\nTake first <code>n</code> elements of the iterator, disregarding the …\nApplies function each elements of the iterator. Stops …")