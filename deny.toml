# This section is considered when running `cargo deny check advisories`
# More documentation for the advisories section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/advisories/cfg.html
[advisories]
ignore = [
    # HACK(eddyb) `instant` is unmaintained (`web-time` suggested replacement),
    # non-trivial to remove as e.g. even the latest `minifb` still uses it.
    "RUSTSEC-2024-0384",
    # HACK(firestar99) `paste` is unmaintained, used by wgpu with no replacement available
    "RUSTSEC-2024-0436",
]

# This section is considered when running `cargo deny check bans`.
# More documentation about the 'bans' section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/bans/cfg.html
[bans]
# Lint level for when multiple versions of the same crate are detected
multiple-versions = "deny"
# Lint level for when a crate version requirement is `*`
wildcards = "allow"
highlight = "all"
# List of crates to deny
deny = [
    # Each entry the name of a crate and a version range. If version is
    # not specified, all versions will be matched.
    #{ name = "ansi_term", version = "=0.11.0" },
]
# Certain crates/versions that will be skipped when doing duplicate detection.
skip = [
    #{ name = "ansi_term", version = "=0.11.0" },

    # HACK(eddyb) two versions coexist for interop, for the time being.
    { name = "raw-window-handle", version = "=0.5.2" },
    { name = "raw-window-handle", version = "=0.6.2" },

    # HACK(eddyb) the newer version hasn't propagated through the ecosystem yet.
    { name = "cfg_aliases", version = "=0.1.1" },
    { name = "cfg_aliases", version = "=0.2.1" },

    # HACK(eddyb) the newer version hasn't propagated through the ecosystem yet.
    { name = "hashbrown", version = "=0.14.5" },
    { name = "hashbrown", version = "=0.15.2" },

    # HACK(eddyb) the newer version hasn't propagated through the ecosystem yet.
    { name = "ndk-sys", version = "=0.5.0+25.2.9519653" },
    { name = "ndk-sys", version = "=0.6.0+11769913" },
]
# Similarly to `skip` allows you to skip certain crates during duplicate
# detection. Unlike skip, it also includes the entire tree of transitive
# dependencies starting at the specified crate, up to a certain depth, which is
# by default infinite
skip-tree = [
    # HACK(eddyb) `jni` (an `android-activity` dep) uses older `windows-*`.
    { name = "jni", version = "=0.21.1", depth = 7 },
    # HACK(eddyb) `plist` (an `ash-molten` build dep) uses older `quick-xml`.
    { name = "plist", version = "=1.7.0", depth = 2 },
    # HACK(eddyb) `minifb` (an `example-runner-cpu` dep) uses older `wayland-*`.
    { name = "minifb", version = "=0.25.0", depth = 3 },
    # HACK(eddyb) `num_cpus` (a `tester` dep) uses older `hermit-abi`.
    { name = "num_cpus", version = "=1.16.0", depth = 2 },
    # HACK(LegNeato) `tracing-tree` uses newer dependencies of `tracing`.
    { name = "tracing-tree", version = "=0.3.1" },
]




[licenses]
# List of explictly allowed licenses
# See https://spdx.org/licenses/ for list of possible licenses
# [possible values: any SPDX 3.7 short identifier (+ optional exception)].
allow = [
    "MIT",
    "Apache-2.0",
    "Apache-2.0 WITH LLVM-exception",
    "BSD-2-Clause",
    "BSD-3-Clause",
    "ISC",

    "Zlib",

    "Unicode-3.0",
]
# Allow 1 or more licenses on a per-crate basis, so that particular licenses
# aren't accepted for every possible crate as with the normal allow list
exceptions = [
    # CC0 is a permissive license but somewhat unclear status for source code
    # so we prefer to not have dependencies using it
    # https://tldrlegal.com/license/creative-commons-cc0-1.0-universal
    { allow = ["CC0-1.0"], name = "notify", version = "7.0.0" },
    { allow = ["CC0-1.0"], name = "hexf-parse" },
]

# See note in encoding_rs's readme! This clarification is copied directly from there.
[[licenses.clarify]]
name = "encoding_rs"
version = "*"
expression = "(Apache-2.0 OR MIT) AND BSD-3-Clause"
license-files = [
    { path = "COPYRIGHT", hash = 0x39f8ad31 }
]

# This section is considered when running `cargo deny check sources`.
# More documentation about the 'sources' section can be found here:
# https://embarkstudios.github.io/cargo-deny/checks/sources/cfg.html
[sources]
# Lint level for what to happen when a crate from a crate registry that is not
# in the allow list is encountered
unknown-registry = "warn"
# Lint level for what to happen when a crate from a git repository that is not
# in the allow list is encountered
unknown-git = "allow"
